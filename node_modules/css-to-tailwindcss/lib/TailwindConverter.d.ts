import type { AttributeSelector, Selector } from 'css-what';
import type { Config } from 'tailwindcss';
import type { ConverterMapping } from './types/ConverterMapping';
import { AcceptedPlugin, Container, Declaration, Rule, Root, Document } from 'postcss';
import { TailwindNode } from './TailwindNodesManager';
import { ResolvedTailwindConfig } from './utils/resolveConfig';
export interface TailwindConverterConfig {
    remInPx?: number | null;
    tailwindConfig?: Config;
    postCSSPlugins: AcceptedPlugin[];
    arbitraryPropertiesIsEnabled: boolean;
}
export interface ResolvedTailwindConverterConfig extends TailwindConverterConfig {
    tailwindConfig: ResolvedTailwindConfig;
    mapping: ConverterMapping;
}
export declare const DEFAULT_CONVERTER_CONFIG: Omit<TailwindConverterConfig, 'tailwindConfig'>;
export declare class TailwindConverter {
    protected config: ResolvedTailwindConverterConfig;
    constructor({ tailwindConfig, ...converterConfig }?: Partial<TailwindConverterConfig>);
    convertCSS(css: string): Promise<{
        nodes: import("./TailwindNodesManager").ResolvedTailwindNode[];
        convertedRoot: Document | Root;
    }>;
    protected cleanRaws(root: Root | Document): void;
    protected convertRule(rule: Rule): TailwindNode | null;
    protected convertDeclarationToClasses(declaration: Declaration): string[];
    protected makeTailwindNode(rule: Rule, tailwindClasses: string[]): TailwindNode;
    protected parseSelector(rawSelector: string): {
        baseSelector: string;
        classPrefix: string;
    };
    protected convertSelectorToClassPrefix(selector: Selector): string | null;
    protected attributeSelectorToMappingKey(selector: AttributeSelector, from?: number): string;
    protected convertContainerToClassPrefix(container: Container | undefined): string;
    protected convertMediaParamsToClassPrefix(mediaParams: string[]): string;
    protected convertSupportsParamsToClassPrefix(supportParams: string[]): string;
}
