import { type AtRule, type Node, Rule } from 'postcss';
export interface ResolvedTailwindNode {
    rule: Rule;
    tailwindClasses: string[];
}
export interface UnresolvedTailwindNode {
    key: string;
    rootRuleSelector?: string | null;
    originalRule: Rule;
    classesPrefix: string;
    tailwindClasses: string[];
}
export type TailwindNode = ResolvedTailwindNode | UnresolvedTailwindNode;
export declare function isResolvedTailwindNode(node: TailwindNode): node is ResolvedTailwindNode;
export declare function isUnresolvedTailwindNode(node: TailwindNode): node is UnresolvedTailwindNode;
export declare class TailwindNodesManager {
    protected nodesMap: Map<string, ResolvedTailwindNode>;
    constructor(initialNodes?: TailwindNode[]);
    mergeNode(node: TailwindNode): void;
    mergeNodes(nodes: TailwindNode[]): void;
    hasNode(key: string): boolean;
    getNode(key: string): ResolvedTailwindNode | null;
    getNodes(): ResolvedTailwindNode[];
    protected upToRootChild(node: Node): AtRule | Rule | null;
    static convertRuleToKey(rule: Rule, overriddenSelector?: string | null): string;
    protected static makeSingleAtRuleKey(atRule: AtRule): string;
    protected static makeSingleRuleKey(atRule: Rule): string;
}
