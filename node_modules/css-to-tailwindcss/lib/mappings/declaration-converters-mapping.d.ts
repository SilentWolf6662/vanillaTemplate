import type { Declaration } from 'postcss';
import type { ResolvedTailwindConverterConfig } from '../TailwindConverter';
export declare function prepareArbitraryValue(value: string): string;
type CSSDataType = 'color' | 'length' | 'number' | 'image' | 'position' | 'family-name';
export declare function convertDeclarationValue(value: string, valuesMap: Record<string, string>, classPrefix: string, fallbackValue?: string, fallbackClassPrefix?: string, cssDataType?: CSSDataType | null): string[];
export declare function strictConvertDeclarationValue(value: string, valuesMap: Record<string, string>): string[];
export declare function convertComposedSpacingDeclarationValue(value: string, mapping: {
    top: {
        valuesMapping: Record<string, string>;
        classPrefix: string;
    };
    right: {
        valuesMapping: Record<string, string>;
        classPrefix: string;
    };
    bottom: {
        valuesMapping: Record<string, string>;
        classPrefix: string;
    };
    left: {
        valuesMapping: Record<string, string>;
        classPrefix: string;
    };
}, remInPx: number | null | undefined): string[];
type DeclarationConverter = (declaration: Declaration, config: ResolvedTailwindConverterConfig) => string[];
interface DeclarationConvertersMapping {
    [property: string]: DeclarationConverter;
}
export declare const DECLARATION_CONVERTERS_MAPPING: DeclarationConvertersMapping;
export {};
